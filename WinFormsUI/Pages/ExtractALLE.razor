@page "/extractALLE"
@using DataLibrary.DbServices;
@using DataLibrary.Services
@using DataLibrary.Settings;
@using Microsoft.Extensions.Options;
@inject IOptionsMonitor<DriverPathSettings> pathSettings
@inject IOptionsMonitor<RazorPageSettings> razorPageSettings
@inject IOptionsMonitor<WebPageStringSettings> webPageStringSettings
@inject IOptionsMonitor<BlobSettings> blobSettings

<ExtractBase 
    County="ALLE" 
    BlobContainer="@blobSettings.CurrentValue.ALLEContainer" 
    DataServiceFactory="@(new ALLEDataServiceFactory())" 
    DropDownSelect="@webPageStringSettings.CurrentValue.ALLEDropDownSelect"
    FirefoxProfilePath="@pathSettings.CurrentValue.FirefoxALLEProfilePath"
    GeckoDriverPath="@pathSettings.CurrentValue.GeckoDriverPath" />

}
else
{
    <div class="row mb-3 mt-3">
        <div class="container">
            <h3>ALLE</h3>
        </div>
        <div class="container">
            <div>
                <EditForm Model="@Amount">
                    <label>Amount</label>
                    <InputNumber TValue="int" @bind-Value="@Amount" DisplayName="Amount">@Amount</InputNumber>
                </EditForm>
                <button class="btn btn-primary" type="submit" disabled="@(controller.Running)" @onclick="() => Extract(Amount)">Extract</button>
                <button class="btn btn-danger" type="submit" disabled="@(!controller.Running)" @onclick="() => Quit()">Quit</button>
            </div>
        </div>
    </div>
}

@code {
    private int Amount { get; set; }

    private async Task Extract(int amount)
    {
        ALLEDataServiceFactory dataServiceFactory = new();
        await controller.StartExtract(
            extractor,
            dataServiceFactory,
            "ALLE",
            pathSettings.CurrentValue.FirefoxALLEProfilePath,
            pathSettings.CurrentValue.GeckoDriverPath,
            webPageStringSettings.CurrentValue.ALLEDropDownSelect,
            blobSettings.CurrentValue.ALLEContainer,
            Amount);
        StateHasChanged();
    }

    private void Quit()
    {
        controller.Cancel();
        StateHasChanged();
    }

    private void JobFinishedEventHandler(object sender, EventArgs args)
    {
        InvokeAsync(StateHasChanged);
    }

    protected override Task OnInitializedAsync()
    {
        Amount = razorPageSettings.CurrentValue.MajorAmount;
        this.controller.JobFinished += JobFinishedEventHandler;

        return base.OnInitializedAsync();
    }
}
