@page "/settings"
@using DataLibrary.Settings;
@using Microsoft.AspNetCore.Components.Forms;
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.Extensions.Options;
@using System.Text.Json;
@using System.Text.Json.Nodes;
@inject IOptionsMonitor<DriverPathSettings> pathSettings

<PageTitle>Settings</PageTitle>
<div class="row mb-3 mt-3">
    <div class="column mb-3 mt-3">
        <div class="container mt-3">
            <div>
                <button class="btn btn-primary" @onclick="LoadGeckoDriver">Gecko Driver</button>
                <label style="color:green">@pathSettings.CurrentValue.GeckoDriverPath</label>
                <button class="btn btn-secondary" @onclick="ClearGeckoDriver">Clear</button>
            </div>
            <br />
            <div>
                <button class="btn btn-primary" @onclick="LoadFirefoxBACI1Profile">BACI1 Profile</button>
                <label style="color:green">@pathSettings.CurrentValue.FirefoxBACI1ProfilePath</label>
                <button class="btn btn-secondary" @onclick="ClearFirefoxBACI1Profile">Clear</button>
            </div>
            
            <div>
                <button class="btn btn-primary" @onclick="LoadFirefoxBACO1Profile">BACO1 Profile</button>
                <label style="color:green">@pathSettings.CurrentValue.FirefoxBACO1ProfilePath</label>
                <button class="btn btn-secondary" @onclick="ClearFirefoxBACO1Profile">Clear</button>
            </div>
            
        </div>
    </div>
</div>

@if (ErrorsList.Count > 0)
{
    <h2>ErrorsList</h2>
    <ul class="text-danger">
        @foreach (var error in ErrorsList)
        {
            <li>@error</li>
        }
    </ul>
}

@code {
    private List<string> ErrorsList = new();

    protected override void OnInitialized()
    {
        pathSettings.OnChange((s, v) =>
        {
            InvokeAsync(() => StateHasChanged());
        });
    }
    private void ClearGeckoDriver()
    {
        SettingsWriter.AddOrUpdateAppSetting("DriverPathSettings:GeckoDriverPath", "");
    }
    private void LoadGeckoDriver()
    {
        ErrorsList.Clear();
        FolderBrowserDialog folderBrowserDialog = new FolderBrowserDialog();
        folderBrowserDialog.InitialDirectory = Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData);
        DialogResult res = folderBrowserDialog.ShowDialog();
        if (res == DialogResult.OK)
        {
            SettingsWriter.AddOrUpdateAppSetting("DriverPathSettings:GeckoDriverPath", folderBrowserDialog.SelectedPath);
        }
        else
        {
            ErrorsList.Add(res.ToString());
        }
    }
    private void LoadFirefoxANNE1Profile() => LoadFirefoxProfile("ANNE", "1");
    private void LoadFirefoxANNE2Profile() => LoadFirefoxProfile("ANNE", "2");
    private void LoadFirefoxANNE3Profile() => LoadFirefoxProfile("ANNE", "3");
    private void LoadFirefoxBACI1Profile() => LoadFirefoxProfile("BACI", "1");
    private void LoadFirefoxBACI2Profile() => LoadFirefoxProfile("BACI", "2");
    private void LoadFirefoxBACI3Profile() => LoadFirefoxProfile("BACI", "3");
    private void LoadFirefoxBACI4Profile() => LoadFirefoxProfile("BACI", "4");
    private void LoadFirefoxBACI5Profile() => LoadFirefoxProfile("BACI", "5");
    private void LoadFirefoxBACO1Profile() => LoadFirefoxProfile("BACO", "1");
    private void LoadFirefoxBACO2Profile() => LoadFirefoxProfile("BACO", "2");
    private void LoadFirefoxBACO3Profile() => LoadFirefoxProfile("BACO", "3");
    private void LoadFirefoxBACO4Profile() => LoadFirefoxProfile("BACO", "4");
    private void LoadFirefoxBACO5Profile() => LoadFirefoxProfile("BACO", "5");
    private void LoadFirefoxCARRProfile() => LoadFirefoxProfile("CARR", "");
    private void LoadFirefoxCECIProfile() => LoadFirefoxProfile("CECI", "");
    private void LoadFirefoxCHARProfile() => LoadFirefoxProfile("CHAR", "");
    private void LoadFirefoxHARFProfile() => LoadFirefoxProfile("HARF", "");
    private void LoadFirefoxHOWAProfile() => LoadFirefoxProfile("HOWA", "");
    private void LoadFirefoxMONTProfile() => LoadFirefoxProfile("MONT", "");
    private void LoadFirefoxPRINProfile() => LoadFirefoxProfile("PRIN", "");
    private void LoadFirefoxWORCProfile() => LoadFirefoxProfile("WORC", "");
    private void LoadFirefoxProfile(string county, string number)
    {
        ErrorsList.Clear();
        FolderBrowserDialog folderBrowserDialog = new FolderBrowserDialog();
        folderBrowserDialog.InitialDirectory = Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData);
        DialogResult res = folderBrowserDialog.ShowDialog();
        if (res == DialogResult.OK)
        {
            SettingsWriter.AddOrUpdateAppSetting($"DriverPathSettings:Firefox{county}{number}ProfilePath", folderBrowserDialog.SelectedPath);
        }
        else
        {
            ErrorsList.Add(res.ToString());
        }
    }
    private void ClearFirefoxANNE1Profile() => ClearFirefoxProfile("ANNE", "1");
    private void ClearFirefoxANNE2Profile() => ClearFirefoxProfile("ANNE", "2");
    private void ClearFirefoxANNE3Profile() => ClearFirefoxProfile("ANNE", "3");
    private void ClearFirefoxBACI1Profile() => ClearFirefoxProfile("BACI", "1");
    private void ClearFirefoxBACI2Profile() => ClearFirefoxProfile("BACI", "2");
    private void ClearFirefoxBACI3Profile() => ClearFirefoxProfile("BACI", "3");
    private void ClearFirefoxBACI4Profile() => ClearFirefoxProfile("BACI", "4");
    private void ClearFirefoxBACI5Profile() => ClearFirefoxProfile("BACI", "5");
    private void ClearFirefoxBACO1Profile() => ClearFirefoxProfile("BACO", "1");
    private void ClearFirefoxBACO2Profile() => ClearFirefoxProfile("BACO", "2");
    private void ClearFirefoxBACO3Profile() => ClearFirefoxProfile("BACO", "3");
    private void ClearFirefoxBACO4Profile() => ClearFirefoxProfile("BACO", "4");
    private void ClearFirefoxBACO5Profile() => ClearFirefoxProfile("BACO", "5");
    private void ClearFirefoxCARRProfile() => ClearFirefoxProfile("CARR", "");
    private void ClearFirefoxCECIProfile() => ClearFirefoxProfile("CECI", "");
    private void ClearFirefoxCHARProfile() => ClearFirefoxProfile("CHAR", "");
    private void ClearFirefoxHARFProfile() => ClearFirefoxProfile("HARF", "");
    private void ClearFirefoxHOWAProfile() => ClearFirefoxProfile("HOWA", "");
    private void ClearFirefoxMONTProfile() => ClearFirefoxProfile("MONT", "");
    private void ClearFirefoxPRINProfile() => ClearFirefoxProfile("PRIN", "");
    private void ClearFirefoxWORCProfile() => ClearFirefoxProfile("WORC", "");
    private void ClearFirefoxProfile(string county, string number)
    {
        SettingsWriter.AddOrUpdateAppSetting($"DriverPathSettings:Firefox{county}{number}ProfilePath", "");
    }
    private static class SettingsWriter
    {
        internal static void AddOrUpdateAppSetting(string sectionPathKey, string value)
        {
            try
            {
                var filePath = Path.Combine(System.AppContext.BaseDirectory, "appsettings.json");
                string json = File.ReadAllText(filePath);
                JsonObject jsonObj = JsonSerializer.Deserialize<JsonObject>(json);
                SetValueRecursively(sectionPathKey, jsonObj, value);
                string output = JsonSerializer.Serialize(jsonObj, new JsonSerializerOptions() { WriteIndented = true });
                File.WriteAllText(filePath, output);
            }
            catch (Exception ex)
            {
                Serilog.Log.Information($"Error writing app settings | {0}", ex.Message);
            }
        }

        private static void SetValueRecursively(string sectionPathKey, JsonNode jsonObj, string value)
        { // split the string at the first ':' character
            var remainingSections = sectionPathKey.Split(":", 2);
            var currentSection = remainingSections[0];
            if (remainingSections.Length > 1)
            {
                // continue with the procress, moving down the tree
                var nextSection = remainingSections[1];
                SetValueRecursively(nextSection, jsonObj[currentSection], value);
            }
            else
            {
                // we've got to the end of the tree, set the value
                jsonObj[currentSection] = value;
            }
        }
    }
}
