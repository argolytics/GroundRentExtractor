@page "/settings"
@using DataLibrary.Settings;
@using Microsoft.AspNetCore.Components.Forms;
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.Extensions.Options;
@using System.Text.Json;
@using System.Text.Json.Nodes;
@inject IOptionsMonitor<DriverPathSettings> pathSettings

<PageTitle>Settings</PageTitle>
<div class="row mb-3 mt-3">
    <div class="container mt-3">
        <div>
            <label>Upload Geckodriver executable here</label>
            <br />
            <button class="btn btn-primary" @onclick="LoadGeckodriver">Select Geckodriver</button>
            <label>@pathSettings.CurrentValue.GeckoDriverPath</label>
        </div>
        <div>
            <label>Upload Firefox Profile folder here</label>
            <br />
            <button class="btn btn-primary" @onclick="LoadFirefoxProfile">Select Firefox Profile</button>
            <label>@pathSettings.CurrentValue.FirefoxProfilePath</label>
        </div>
    </div>
    @if (pathSettings.CurrentValue.GeckoDriverPath is not null)
    {
        <div>
            <p>Geckodriver path uploaded!</p>
        </div>
    }
    @if (pathSettings.CurrentValue.FirefoxProfilePath is not null)
    {
        <div>
            <p>Firefox profile path uploaded!</p>
        </div>
    }
    @if (ErrorsList.Count > 0)
    {
        <h2>ErrorsList</h2>
        <ul class="text-danger">
            @foreach (var error in ErrorsList)
            {
                <li>@error</li>
            }
        </ul>
    }
</div>

@code {
    private List<string> ErrorsList = new();

    protected override void OnInitialized()
    {
        pathSettings.OnChange((s, v) =>
        {
            InvokeAsync(() => StateHasChanged());
        });
    }
    private void LoadGeckodriver()
    {
        ErrorsList.Clear();
        OpenFileDialog openFileDialog = new OpenFileDialog();
        openFileDialog.Filter = "(*.exe) | *.exe";
        openFileDialog.Multiselect = false;
        DialogResult res = openFileDialog.ShowDialog();
        if (res == DialogResult.OK)
        {
            SettingsWriter.AddOrUpdateAppSetting("DriverPathSettings:GeckoDriverPath", openFileDialog.FileName);
        }
        else
        {
            ErrorsList.Add(res.ToString());
        }
    }
    private void LoadFirefoxProfile()
    {
        ErrorsList.Clear();
        FolderBrowserDialog folderBrowserDialog = new FolderBrowserDialog();
        folderBrowserDialog.InitialDirectory = Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData);
        DialogResult res = folderBrowserDialog.ShowDialog();
        if (res == DialogResult.OK)
        {
            SettingsWriter.AddOrUpdateAppSetting("DriverPathSettings:FirefoxProfilePath", folderBrowserDialog.SelectedPath);
        }
        else
        {
            ErrorsList.Add(res.ToString());
        }
    }
    private static class SettingsWriter
    {
        internal static void AddOrUpdateAppSetting(string sectionPathKey, string value)
        {
            try
            {
                var filePath = Path.Combine(System.AppContext.BaseDirectory, "appsettings.json"); 
                string json = File.ReadAllText(filePath); 
                JsonObject jsonObj = JsonSerializer.Deserialize<JsonObject>(json); 
                SetValueRecursively(sectionPathKey, jsonObj, value);
                string output = JsonSerializer.Serialize(jsonObj, new JsonSerializerOptions() { WriteIndented = true }); 
                File.WriteAllText(filePath, output);
            }
            catch (Exception ex) { 
                Console.WriteLine("Error writing app settings | {0}", ex.Message); 
            }
        }

        private static void SetValueRecursively(string sectionPathKey, JsonNode jsonObj, string value)
        { // split the string at the first ':' character
            var remainingSections = sectionPathKey.Split(":", 2); 
            var currentSection = remainingSections[0]; 
            if (remainingSections.Length > 1)
            {
                // continue with the procress, moving down the tree
                var nextSection = remainingSections[1]; 
                SetValueRecursively(nextSection, jsonObj[currentSection], value);
            }
            else
            {
                // we've got to the end of the tree, set the value
                jsonObj[currentSection] = value;
            }
        }
    }
}
