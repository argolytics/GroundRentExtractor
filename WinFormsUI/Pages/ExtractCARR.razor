@page "/extractCARR"
@using DataLibrary.DbServices;
@using DataLibrary.Services
@using DataLibrary.Settings;
@using Microsoft.Extensions.Options;
@inject IOptionsMonitor<DriverPathSettings> pathSettings
@inject IOptionsMonitor<RazorPageSettings> razorPageSettings
@inject IOptionsMonitor<WebPageStringSettings> webPageStringSettings
@inject IOptionsMonitor<BlobSettings> blobSettings

<ExtractBase 
    County="CARR" 
    BlobContainer="@blobSettings.CurrentValue.CARRContainer" 
    DataServiceFactory="@(new CARRDataServiceFactory())" 
    DropDownSelect="@webPageStringSettings.CurrentValue.CARRDropDownSelect"
    FirefoxProfilePath="@pathSettings.CurrentValue.FirefoxCARRProfilePath"
    GeckoDriverPath="@pathSettings.CurrentValue.GeckoDriverPath" />

@if (String.IsNullOrEmpty(pathSettings.CurrentValue.FirefoxCARRProfilePath) ||
String.IsNullOrEmpty(pathSettings.CurrentValue.GeckoDriverPath))
{
    <div class="row mb-3 mt-3">
        <div class="container">
            <div>
                Please enter path settings for Firefox Profile and/or Gecko Driver at <a href="Settings">Settings.</a>
            </div>
        </div>
    </div>

}
else
{
    <div class="row mb-3 mt-3">
        <div class="container">
            <h3>CARR</h3>
        </div>
        <div class="container">
            <div>
                <EditForm Model="@Amount">
                    <label>Amount</label>
                    <InputNumber TValue="int" @bind-Value="@Amount" DisplayName="Amount">@Amount</InputNumber>
                </EditForm>
                <button class="btn btn-primary" type="submit" disabled="@(controller.Running)" @onclick="() => Extract(Amount)">Extract</button>
                <button class="btn btn-danger" type="submit" disabled="@(!controller.Running)" @onclick="() => Quit()">Quit</button>
            </div>
        </div>
    </div>
}

@code {
    private int Amount { get; set; }

    private async Task Extract(int amount)
    {
        CARRDataServiceFactory dataServiceFactory = new();
        await controller.StartExtract(
            extractor,
            dataServiceFactory,
            "CARR",
            pathSettings.CurrentValue.FirefoxCARRProfilePath,
            pathSettings.CurrentValue.GeckoDriverPath,
            webPageStringSettings.CurrentValue.CARRDropDownSelect,
            blobSettings.CurrentValue.CARRContainer,
            Amount);
        StateHasChanged();
    }

    private void Quit()
    {
        controller.Cancel();
        StateHasChanged();
    }

    private void JobFinishedEventHandler(object sender, EventArgs args)
    {
        InvokeAsync(StateHasChanged);
    }

    protected override Task OnInitializedAsync()
    {
        Amount = razorPageSettings.CurrentValue.MajorAmount;
        this.controller.JobFinished += JobFinishedEventHandler;

        return base.OnInitializedAsync();
    }
}
